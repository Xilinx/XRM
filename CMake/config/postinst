#!/bin/sh

#
# UBUNTU NOTE
# -----------
# 1. When downgrading (say from 1.3.0 to 1.2.0) then prerm of 1.3.0 is run
#    followed by postinst of 1.2.0. The prerm is invoked with "upgrade 1.2.0"
#    argument and postinst is invoked with "configure 1.3.0" argument.
# 2. When upgrading (say from 1.2.0 to 1.3.0) then prerm of 1.2.0 is run
#    followed by postinst of 1.3.0. The prerm is invoked with "upgrade 1.3.0"
#    argument and postinst is invoked with "configure 1.2.0" argument.
# 3. When re-installing (say from 1.2.0 to 1.2.0) then prerm of 1.2.0 is run
#    followed by postinst of 1.2.0. The prerm is invoked with "upgrade 1.2.0"
#    argument and postinst is invoked with "configure 1.2.0" argument.
#
# RHEL/CentOS/Amazon NOTE
# -----------------------
# 1. When downgrading (say from 1.3.0 to 1.2.0) then oddly postinst of 1.2.0
#    is run first followed by prerm of 1.3.0. The postinst is invoked with
#    "2" and prerm is invoked with "1".
# 2. When upgrading (say from 1.2.0 to 1.3.0) then prerm of 1.2.0 is NOT run
#    but postinst of 1.3.0 is run. The postinst is invoked with "2" argument.
# 3. When re-installing (say from 1.2.0 to 1.2.0) then prerm is NOT run but
#    and postinst of 1.2.0 is run. The postinst is invoked with "2" argument.

# Stopping existing daemon
xrmd_active=`systemctl is-active xrmd`
echo "Running postinst ..."

awk -F= '$1=="ID" {print $2}' /etc/os-release | tr -d '"' | awk '{print tolower($1)}' | grep -Eq "^rhel|^centos|^amzn"
if [ $? -eq 0 ]; then
    rm -f /usr/lib64/libxrm.so
    rm -f /usr/lib64/libxrm.so.1
    ln -s /opt/xilinx/xrm/lib/libxrm.so.1 /usr/lib64/libxrm.so.1
    ln -s /usr/lib64/libxrm.so.1 /usr/lib64/libxrm.so
fi

awk -F= '$1=="ID" {print $2}' /etc/os-release | tr -d '"' | awk '{print tolower($1)}' | grep -Eq "^ubuntu|^debian"
if [ $? -eq 0 ]; then
    rm -f /usr/lib/libxrm.so
    rm -f /usr/lib/libxrm.so.1
    ln -s /opt/xilinx/xrm/lib/libxrm.so.1 /usr/lib/libxrm.so.1
    ln -s /usr/lib/libxrm.so.1 /usr/lib/libxrm.so
fi

if [ "$xrmd_active" = "active" ]; then
    echo "Stopping existing XRM daemon"
    systemctl stop xrmd > /dev/null 2>&1
fi

# Install XRM daemon service
systemctl daemon-reload > /dev/null 2>&1

# Start XRM daemon
echo "Starting XRM daemon"
systemctl start xrmd > /dev/null 2>&1

# Enable starting XRM daemon on boot
echo "Enabling starting XRM daemon on boot"
systemctl enable xrmd > /dev/null 2>&1

exit 0
